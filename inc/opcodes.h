case 0x04: INC_DEC(cpu, &cpu->B, 	4,	'i'); break;	//INC(&cpu->B, cpu->NONE)
case 0x05: INC_DEC(cpu, &cpu->B, 	4,	'd'); break;	//DEC(&cpu->B, cpu->NONE)
case 0x0c: INC_DEC(cpu, &cpu->C, 	4,	'i'); break;	//INC(&cpu->C, cpu->NONE)
case 0x0d: INC_DEC(cpu, &cpu->C, 	4,	'd'); break;	//DEC(&cpu->C, cpu->NONE)
case 0x14: INC_DEC(cpu, &cpu->D, 	4,	'i'); break;	//INC(&cpu->D, cpu->NONE)
case 0x15: INC_DEC(cpu, &cpu->D, 	4,	'd'); break;	//DEC(&cpu->D, cpu->NONE)
case 0x1c: INC_DEC(cpu, &cpu->E, 	4,	'i'); break;	//INC(&cpu->E, cpu->NONE)
case 0x1d: INC_DEC(cpu, &cpu->E, 	4,	'd'); break;	//DEC(&cpu->E, cpu->NONE)
case 0x24: INC_DEC(cpu, &cpu->H, 	4,	'i'); break;	//INC(&cpu->H, cpu->NONE)
case 0x25: INC_DEC(cpu, &cpu->H, 	4,	'd'); break;	//DEC(&cpu->H, cpu->NONE)
case 0x27: ALU_A_8(cpu,       0, 	4, 	'?'); break;	//DAA(      0, cpu->NONE)
case 0x2c: INC_DEC(cpu, &cpu->L, 	4,	'i'); break;	//INC(&cpu->L, cpu->NONE)
case 0x2d: INC_DEC(cpu, &cpu->L, 	4,	'd'); break;	//DEC(&cpu->L, cpu->NONE)
case 0x2f: ALU_A_8(cpu,       0, 	4, 	'?'); break;	//CPL(      0, cpu->NONE)
case 0x34: INC_DEC(cpu, memPtr(RAM, cpu->HL), 	12,	'i'); break;	//INC(memPtr(RAM, cpu->HL), cpu->NONE)
case 0x35: INC_DEC(cpu, memPtr(RAM, cpu->HL), 	12,	'd'); break;	//DEC(memPtr(RAM, cpu->HL), cpu->NONE)
case 0x37: ALU_A_8(cpu,       0, 	4, 	'?'); break;	//SCF(      0, cpu->NONE)
case 0x3c: INC_DEC(cpu, &cpu->A, 	4,	'i'); break;	//INC(&cpu->A, cpu->NONE)
case 0x3d: INC_DEC(cpu, &cpu->A, 	4,	'd'); break;	//DEC(&cpu->A, cpu->NONE)
case 0x3f: ALU_A_8(cpu,       0, 	4, 	'?'); break;	//CCF(      0, cpu->NONE)
case 0x80: ALU_A_8(cpu, &cpu->A, 	4, 	'+'); break;	//ADD(&cpu->A, cpu->B)
case 0x81: ALU_A_8(cpu, &cpu->A, 	4, 	'+'); break;	//ADD(&cpu->A, cpu->C)
case 0x82: ALU_A_8(cpu, &cpu->A, 	4, 	'+'); break;	//ADD(&cpu->A, cpu->D)
case 0x83: ALU_A_8(cpu, &cpu->A, 	4, 	'+'); break;	//ADD(&cpu->A, cpu->E)
case 0x84: ALU_A_8(cpu, &cpu->A, 	4, 	'+'); break;	//ADD(&cpu->A, cpu->H)
case 0x85: ALU_A_8(cpu, &cpu->A, 	4, 	'+'); break;	//ADD(&cpu->A, cpu->L)
case 0x86: ALU_A_8(cpu, &cpu->A, 	8, 	'+'); break;	//ADD(&cpu->A, memPtr(RAM, cpu->HL))
case 0x87: ALU_A_8(cpu, &cpu->A, 	4, 	'+'); break;	//ADD(&cpu->A, cpu->A)
case 0x88: ALU_A_8(cpu, &cpu->A, 	4, 	'a'); break;	//ADC(&cpu->A, cpu->B)
case 0x89: ALU_A_8(cpu, &cpu->A, 	4, 	'a'); break;	//ADC(&cpu->A, cpu->C)
case 0x8a: ALU_A_8(cpu, &cpu->A, 	4, 	'a'); break;	//ADC(&cpu->A, cpu->D)
case 0x8b: ALU_A_8(cpu, &cpu->A, 	4, 	'a'); break;	//ADC(&cpu->A, cpu->E)
case 0x8c: ALU_A_8(cpu, &cpu->A, 	4, 	'a'); break;	//ADC(&cpu->A, cpu->H)
case 0x8d: ALU_A_8(cpu, &cpu->A, 	4, 	'a'); break;	//ADC(&cpu->A, cpu->L)
case 0x8e: ALU_A_8(cpu, &cpu->A, 	8, 	'a'); break;	//ADC(&cpu->A, memPtr(RAM, cpu->HL))
case 0x8f: ALU_A_8(cpu, &cpu->A, 	4, 	'a'); break;	//ADC(&cpu->A, cpu->A)
case 0x90: ALU_A_8(cpu, &cpu->B, 	4, 	'-'); break;	//SUB(&cpu->B, cpu->NONE)
case 0x91: ALU_A_8(cpu, &cpu->C, 	4, 	'-'); break;	//SUB(&cpu->C, cpu->NONE)
case 0x92: ALU_A_8(cpu, &cpu->D, 	4, 	'-'); break;	//SUB(&cpu->D, cpu->NONE)
case 0x93: ALU_A_8(cpu, &cpu->E, 	4, 	'-'); break;	//SUB(&cpu->E, cpu->NONE)
case 0x94: ALU_A_8(cpu, &cpu->H, 	4, 	'-'); break;	//SUB(&cpu->H, cpu->NONE)
case 0x95: ALU_A_8(cpu, &cpu->L, 	4, 	'-'); break;	//SUB(&cpu->L, cpu->NONE)
case 0x96: ALU_A_8(cpu, memPtr(RAM, cpu->HL), 	8, 	'-'); break;	//SUB(memPtr(RAM, cpu->HL), cpu->NONE)
case 0x97: ALU_A_8(cpu, &cpu->A, 	4, 	'-'); break;	//SUB(&cpu->A, cpu->NONE)
case 0x98: ALU_A_8(cpu, &cpu->A, 	4, 	's'); break;	//SBC(&cpu->A, cpu->B)
case 0x99: ALU_A_8(cpu, &cpu->A, 	4, 	's'); break;	//SBC(&cpu->A, cpu->C)
case 0x9a: ALU_A_8(cpu, &cpu->A, 	4, 	's'); break;	//SBC(&cpu->A, cpu->D)
case 0x9b: ALU_A_8(cpu, &cpu->A, 	4, 	's'); break;	//SBC(&cpu->A, cpu->E)
case 0x9c: ALU_A_8(cpu, &cpu->A, 	4, 	's'); break;	//SBC(&cpu->A, cpu->H)
case 0x9d: ALU_A_8(cpu, &cpu->A, 	4, 	's'); break;	//SBC(&cpu->A, cpu->L)
case 0x9e: ALU_A_8(cpu, &cpu->A, 	8, 	's'); break;	//SBC(&cpu->A, memPtr(RAM, cpu->HL))
case 0x9f: ALU_A_8(cpu, &cpu->A, 	4, 	's'); break;	//SBC(&cpu->A, cpu->A)
case 0xa0: ALU_A_8(cpu, &cpu->B, 	4, 	'&'); break;	//AND(&cpu->B, cpu->NONE)
case 0xa1: ALU_A_8(cpu, &cpu->C, 	4, 	'&'); break;	//AND(&cpu->C, cpu->NONE)
case 0xa2: ALU_A_8(cpu, &cpu->D, 	4, 	'&'); break;	//AND(&cpu->D, cpu->NONE)
case 0xa3: ALU_A_8(cpu, &cpu->E, 	4, 	'&'); break;	//AND(&cpu->E, cpu->NONE)
case 0xa4: ALU_A_8(cpu, &cpu->H, 	4, 	'&'); break;	//AND(&cpu->H, cpu->NONE)
case 0xa5: ALU_A_8(cpu, &cpu->L, 	4, 	'&'); break;	//AND(&cpu->L, cpu->NONE)
case 0xa6: ALU_A_8(cpu, memPtr(RAM, cpu->HL), 	8, 	'&'); break;	//AND(memPtr(RAM, cpu->HL), cpu->NONE)
case 0xa7: ALU_A_8(cpu, &cpu->A, 	4, 	'&'); break;	//AND(&cpu->A, cpu->NONE)
case 0xa8: ALU_A_8(cpu, &cpu->B, 	4, 	'^'); break;	//XOR(&cpu->B, cpu->NONE)
case 0xa9: ALU_A_8(cpu, &cpu->C, 	4, 	'^'); break;	//XOR(&cpu->C, cpu->NONE)
case 0xaa: ALU_A_8(cpu, &cpu->D, 	4, 	'^'); break;	//XOR(&cpu->D, cpu->NONE)
case 0xab: ALU_A_8(cpu, &cpu->E, 	4, 	'^'); break;	//XOR(&cpu->E, cpu->NONE)
case 0xac: ALU_A_8(cpu, &cpu->H, 	4, 	'^'); break;	//XOR(&cpu->H, cpu->NONE)
case 0xad: ALU_A_8(cpu, &cpu->L, 	4, 	'^'); break;	//XOR(&cpu->L, cpu->NONE)
case 0xae: ALU_A_8(cpu, memPtr(RAM, cpu->HL), 	8, 	'^'); break;	//XOR(memPtr(RAM, cpu->HL), cpu->NONE)
case 0xaf: ALU_A_8(cpu, &cpu->A, 	4, 	'^'); break;	//XOR(&cpu->A, cpu->NONE)
case 0xb0: ALU_A_8(cpu, &cpu->B, 	4, 	'?'); break;	//OR(&cpu->B, cpu->NONE)
case 0xb1: ALU_A_8(cpu, &cpu->C, 	4, 	'?'); break;	//OR(&cpu->C, cpu->NONE)
case 0xb2: ALU_A_8(cpu, &cpu->D, 	4, 	'?'); break;	//OR(&cpu->D, cpu->NONE)
case 0xb3: ALU_A_8(cpu, &cpu->E, 	4, 	'?'); break;	//OR(&cpu->E, cpu->NONE)
case 0xb4: ALU_A_8(cpu, &cpu->H, 	4, 	'?'); break;	//OR(&cpu->H, cpu->NONE)
case 0xb5: ALU_A_8(cpu, &cpu->L, 	4, 	'?'); break;	//OR(&cpu->L, cpu->NONE)
case 0xb6: ALU_A_8(cpu, memPtr(RAM, cpu->HL), 	8, 	'?'); break;	//OR(memPtr(RAM, cpu->HL), cpu->NONE)
case 0xb7: ALU_A_8(cpu, &cpu->A, 	4, 	'?'); break;	//OR(&cpu->A, cpu->NONE)
case 0xb8: CP_A(cpu, &cpu->B, 4); break;	//CP(&cpu->B, cpu->NONE)
case 0xb9: CP_A(cpu, &cpu->C, 4); break;	//CP(&cpu->C, cpu->NONE)
case 0xba: CP_A(cpu, &cpu->D, 4); break;	//CP(&cpu->D, cpu->NONE)
case 0xbb: CP_A(cpu, &cpu->E, 4); break;	//CP(&cpu->E, cpu->NONE)
case 0xbc: CP_A(cpu, &cpu->H, 4); break;	//CP(&cpu->H, cpu->NONE)
case 0xbd: CP_A(cpu, &cpu->L, 4); break;	//CP(&cpu->L, cpu->NONE)
case 0xbe: CP_A(cpu, memPtr(RAM, cpu->HL), 8); break;	//CP(memPtr(RAM, cpu->HL), cpu->NONE)
case 0xbf: CP_A(cpu, &cpu->A, 4); break;	//CP(&cpu->A, cpu->NONE)
case 0xc6: ALU_A_8(cpu, &cpu->A, 	8, 	'+'); break;	//ADD(&cpu->A, cpu->d8)
case 0xce: ALU_A_8(cpu, &cpu->A, 	8, 	'a'); break;	//ADC(&cpu->A, cpu->d8)
case 0xd6: ALU_A_8(cpu, (word*)0, 	8, 	'-'); break;	//SUB((word*)0, cpu->NONE)
case 0xde: ALU_A_8(cpu, &cpu->A, 	8, 	's'); break;	//SBC(&cpu->A, cpu->d8)
case 0xe6: ALU_A_8(cpu, (word*)0, 	8, 	'&'); break;	//AND((word*)0, cpu->NONE)
case 0xee: ALU_A_8(cpu, (word*)0, 	8, 	'^'); break;	//XOR((word*)0, cpu->NONE)
case 0xf6: ALU_A_8(cpu, (word*)0, 	8, 	'?'); break;	//OR((word*)0, cpu->NONE)
case 0xfe: CP_A(cpu, (word*)0, 8); break;	//CP((word*)0, cpu->NONE)
